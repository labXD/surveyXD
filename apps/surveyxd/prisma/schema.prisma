datasource db {
  provider             = "mysql"
  referentialIntegrity = "prisma"
  url                  = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextIndex", "fullTextSearch", "interactiveTransactions"]
  output          = "./generated"
  binaryTargets   = ["native", "linux-musl"]
}

// generator trpc {
//   provider       = "prisma-trpc-generator"
//   withMiddleware = false
//   withShield     = false
//   contextPath    = "../src/modules/trpc/api/utils.ts"
//   output         = "./generated/trpc"
// }

// Next auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String? @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  usersWithAccess SurveyAccess[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SurveyPublishStatus {
  PUBLISHED
  DRAFT
  COMPLETED
}

model Survey {
  id String @id @default(cuid())

  title           String?
  questions       Question[]
  usersWithAccess SurveyAccess[]
  answers         Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  publishStatus SurveyPublishStatus @default(DRAFT)

  @@fulltext([title])
}

enum SurveyUserAcessRoles {
  ADMIN
  EDITOR
  VIEWER
}

model SurveyAccess {
  id String @id @default(cuid())

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  role SurveyUserAcessRoles @default(ADMIN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  // TEXT // future
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  // DROPDOWN // leverage multiple choice
  // LIKERT_SCALE // leverage multiple choise
}

model Question {
  id           String       @id @default(cuid())
  title        String
  description  String?
  questionType QuestionType
  isRequired   Boolean @default(false)

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  answers Answer[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  options   AnswerOption[]

  @@fulltext([title])
}

model AnswerOption {
  id String @id @default(cuid())

  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  numericValue Int
  textValue    String
  questionType QuestionType

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("QuestionAnswer")
}

model Answer {
  id String @id @default(cuid())

  answerId       String
  answer         AnswerOption @relation(fields: [answerId], references: [id], onDelete: Cascade)
  freeTextAnswer String?

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
}
